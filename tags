!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
Alien	Alien.h	/^  Alien(float x, float y, float vx, float vy, int width, int height,$/;"	f	struct:Color::Alien
Alien	Alien.h	/^struct Alien {$/;"	s	class:Color
Alive	Bullet.h	/^  bool Alive;$/;"	m	struct:Bullet
Alive	ParticleEffect.h	/^        bool Alive;$/;"	m	struct:ParticleEffect
Alive	ParticleEffect.h	/^        bool Alive;$/;"	m	struct:ParticleEffect2
Alive	ParticleEffect.h	/^        bool Alive;$/;"	m	struct:ParticleEffect3
AudioThread	olcConsoleGameEngine.h	/^		void AudioThread()$/;"	f	class:olcConsoleGameEngine
BG_BLACK	olcConsoleGameEngine.h	/^	BG_BLACK = 0x0000,$/;"	e	enum:COLOUR
BG_BLUE	olcConsoleGameEngine.h	/^	BG_BLUE = 0x0090,$/;"	e	enum:COLOUR
BG_CYAN	olcConsoleGameEngine.h	/^	BG_CYAN = 0x00B0,$/;"	e	enum:COLOUR
BG_DARK_BLUE	olcConsoleGameEngine.h	/^	BG_DARK_BLUE = 0x0010,$/;"	e	enum:COLOUR
BG_DARK_CYAN	olcConsoleGameEngine.h	/^	BG_DARK_CYAN = 0x0030,$/;"	e	enum:COLOUR
BG_DARK_GREEN	olcConsoleGameEngine.h	/^	BG_DARK_GREEN = 0x0020,$/;"	e	enum:COLOUR
BG_DARK_GREY	olcConsoleGameEngine.h	/^	BG_DARK_GREY = 0x0080,$/;"	e	enum:COLOUR
BG_DARK_MAGENTA	olcConsoleGameEngine.h	/^	BG_DARK_MAGENTA = 0x0050,$/;"	e	enum:COLOUR
BG_DARK_RED	olcConsoleGameEngine.h	/^	BG_DARK_RED = 0x0040,$/;"	e	enum:COLOUR
BG_DARK_YELLOW	olcConsoleGameEngine.h	/^	BG_DARK_YELLOW = 0x0060,$/;"	e	enum:COLOUR
BG_GREEN	olcConsoleGameEngine.h	/^	BG_GREEN = 0x00A0,$/;"	e	enum:COLOUR
BG_GREY	olcConsoleGameEngine.h	/^	BG_GREY = 0x0070,$/;"	e	enum:COLOUR
BG_MAGENTA	olcConsoleGameEngine.h	/^	BG_MAGENTA = 0x00D0,$/;"	e	enum:COLOUR
BG_RED	olcConsoleGameEngine.h	/^	BG_RED = 0x00C0,$/;"	e	enum:COLOUR
BG_WHITE	olcConsoleGameEngine.h	/^	BG_WHITE = 0x00F0,$/;"	e	enum:COLOUR
BG_YELLOW	olcConsoleGameEngine.h	/^	BG_YELLOW = 0x00E0,$/;"	e	enum:COLOUR
BLUE	Alien.h	/^enum class Color { BLUE = 145, GREEN = 165 , WHITE = 245, YELLOW = 235};$/;"	m	class:Color
Behavior	Alien.h	/^enum class Behavior { circles, side_to_side, sniper };$/;"	c
Bullet	Bullet.h	/^  Bullet(float x, float y, float vx, float vy) {$/;"	f	struct:Bullet
Bullet	Bullet.h	/^struct Bullet {$/;"	s
COLOUR	olcConsoleGameEngine.h	/^enum COLOUR$/;"	g
CUTSCENE	globals.h	/^  bool CUTSCENE = false;					\/\/ is game in a cutscene$/;"	v
ClearScreen	Drawing.h	/^  void ClearScreen(olcConsoleGameEngine& game) {$/;"	f	namespace:Drawing
Clip	olcConsoleGameEngine.h	/^	void Clip(int &x, int &y)$/;"	f	class:olcConsoleGameEngine
Color	Alien.h	/^enum class Color { BLUE = 145, GREEN = 165 , WHITE = 245, YELLOW = 235};$/;"	c
ConstructConsole	olcConsoleGameEngine.h	/^	int ConstructConsole(int width, int height, int fontw, int fonth)$/;"	f	class:olcConsoleGameEngine
ConstructWindow	olcConsoleGameEngine.h	/^	HWND ConstructWindow(int width, int height)$/;"	f	class:olcConsoleGameEngine
Cracked	Alien.h	/^  bool Cracked;$/;"	m	struct:Color::Alien
Create	olcConsoleGameEngine.h	/^	void Create(int w, int h)$/;"	f	class:olcSprite
CreateAudio	olcConsoleGameEngine.h	/^		bool CreateAudio(unsigned int nSampleRate = 44100, unsigned int nChannels = 1,$/;"	f	class:olcConsoleGameEngine
CutSceneTimer	globals.h	/^  float CutSceneTimer = 0.0;$/;"	v
DestroyAudio	olcConsoleGameEngine.h	/^		bool DestroyAudio()$/;"	f	class:olcConsoleGameEngine
Distance	globals.h	/^  float Distance(float x, float y, float x2, float y2) {$/;"	f	namespace:Globals
Draw	olcConsoleGameEngine.h	/^	virtual void Draw(int x, int y, wchar_t c = 0x2588, short col = 0x000F)$/;"	f	class:olcConsoleGameEngine
DrawBullet	Drawing.h	/^  void DrawBullet(olcConsoleGameEngine& game, float xpos, float ypos, int width, int height) {$/;"	f	namespace:Drawing
DrawCircle	olcConsoleGameEngine.h	/^	void DrawCircle(int xc, int yc, int r, wchar_t c = 0x2588, short col = 0x000F)$/;"	f	class:olcConsoleGameEngine
DrawEnemy	Drawing.h	/^  void DrawEnemy(olcConsoleGameEngine& game, Alien & e) {$/;"	f	namespace:Drawing
DrawExplodingBullet	Drawing.h	/^  void DrawExplodingBullet(olcConsoleGameEngine& game, ParticleEffect2& pe) {$/;"	f	namespace:Drawing
DrawExplodingEnemy	Drawing.h	/^  void DrawExplodingEnemy(olcConsoleGameEngine& game, ParticleEffect3& pe) {$/;"	f	namespace:Drawing
DrawExplosion	Drawing.h	/^  void DrawExplosion(olcConsoleGameEngine& game, const int& xPos0, const int& yPos0, const int& radius) {$/;"	f	namespace:Drawing
DrawHealthBar	Drawing.h	/^  void DrawHealthBar(olcConsoleGameEngine& game, int& health) {$/;"	f	namespace:Drawing
DrawLine	olcConsoleGameEngine.h	/^	void DrawLine(int x1, int y1, int x2, int y2, wchar_t c = 0x2588, short col = 0x000F)$/;"	f	class:olcConsoleGameEngine
DrawPartialSprite	olcConsoleGameEngine.h	/^	void DrawPartialSprite(int x, int y, olcSprite *sprite, int ox, int oy, int w, int h)$/;"	f	class:olcConsoleGameEngine
DrawPlayer	Drawing.h	/^  void DrawPlayer(olcConsoleGameEngine& game, float * playerPos) {$/;"	f	namespace:Drawing
DrawRain	Drawing.h	/^  void DrawRain(olcConsoleGameEngine& game, Drop & d) {$/;"	f	namespace:Drawing
DrawSprite	olcConsoleGameEngine.h	/^	void DrawSprite(int x, int y, olcSprite *sprite)$/;"	f	class:olcConsoleGameEngine
DrawString	olcConsoleGameEngine.h	/^	void DrawString(int x, int y, wstring c, short col = 0x000F)$/;"	f	class:olcConsoleGameEngine
DrawStringAlpha	olcConsoleGameEngine.h	/^	void DrawStringAlpha(int x, int y, wstring c, short col = 0x000F)$/;"	f	class:olcConsoleGameEngine
DrawTriangle	olcConsoleGameEngine.h	/^	void DrawTriangle(int x1, int y1, int x2, int y2, int x3, int y3, short c = 0x2588, short col = 0x000F)$/;"	f	class:olcConsoleGameEngine
DrawWireFrameModel	olcConsoleGameEngine.h	/^	void DrawWireFrameModel(const std::vector<std::pair<float, float>> &vecModelCoordinates, float x, float y, float r = 0.0f, float s = 1.0f, short col = FG_WHITE, short c = PIXEL_SOLID)$/;"	f	class:olcConsoleGameEngine
Drawing	Drawing.h	/^namespace Drawing {$/;"	n
Drop	Drop.h	/^  Drop(int _level) {$/;"	f	struct:Drop
Drop	Drop.h	/^struct Drop {$/;"	s
EnableSound	olcConsoleGameEngine.h	/^	void EnableSound()$/;"	f	class:olcConsoleGameEngine
Error	olcConsoleGameEngine.h	/^	int Error(const wchar_t *msg)$/;"	f	class:olcConsoleGameEngine
Example	main.cpp	/^struct Example : public olcConsoleGameEngine {$/;"	s	file:
FG_BLACK	olcConsoleGameEngine.h	/^	FG_BLACK = 0x0000,$/;"	e	enum:COLOUR
FG_BLUE	olcConsoleGameEngine.h	/^	FG_BLUE = 0x0009,$/;"	e	enum:COLOUR
FG_CYAN	olcConsoleGameEngine.h	/^	FG_CYAN = 0x000B,$/;"	e	enum:COLOUR
FG_DARK_BLUE	olcConsoleGameEngine.h	/^	FG_DARK_BLUE = 0x0001,$/;"	e	enum:COLOUR
FG_DARK_CYAN	olcConsoleGameEngine.h	/^	FG_DARK_CYAN = 0x0003,$/;"	e	enum:COLOUR
FG_DARK_GREEN	olcConsoleGameEngine.h	/^	FG_DARK_GREEN = 0x0002,$/;"	e	enum:COLOUR
FG_DARK_GREY	olcConsoleGameEngine.h	/^	FG_DARK_GREY = 0x0008,$/;"	e	enum:COLOUR
FG_DARK_MAGENTA	olcConsoleGameEngine.h	/^	FG_DARK_MAGENTA = 0x0005,$/;"	e	enum:COLOUR
FG_DARK_RED	olcConsoleGameEngine.h	/^	FG_DARK_RED = 0x0004,$/;"	e	enum:COLOUR
FG_DARK_YELLOW	olcConsoleGameEngine.h	/^	FG_DARK_YELLOW = 0x0006,$/;"	e	enum:COLOUR
FG_GREEN	olcConsoleGameEngine.h	/^	FG_GREEN = 0x000A,$/;"	e	enum:COLOUR
FG_GREY	olcConsoleGameEngine.h	/^	FG_GREY = 0x0007, \/\/ Thanks MS :-\/$/;"	e	enum:COLOUR
FG_MAGENTA	olcConsoleGameEngine.h	/^	FG_MAGENTA = 0x000D,$/;"	e	enum:COLOUR
FG_RED	olcConsoleGameEngine.h	/^	FG_RED = 0x000C,$/;"	e	enum:COLOUR
FG_WHITE	olcConsoleGameEngine.h	/^	FG_WHITE = 0x000F,$/;"	e	enum:COLOUR
FG_YELLOW	olcConsoleGameEngine.h	/^	FG_YELLOW = 0x000E,$/;"	e	enum:COLOUR
FUV	olcConsoleGameEngine.h	277;"	d
Fall	Drop.h	/^  void Fall(float fElapsed) {$/;"	f	struct:Drop
Fill	olcConsoleGameEngine.h	/^	void Fill(int x1, int y1, int x2, int y2, wchar_t c = 0x2588, short col = 0x000F)$/;"	f	class:olcConsoleGameEngine
FillCircle	olcConsoleGameEngine.h	/^	void FillCircle(int xc, int yc, int r, wchar_t c = 0x2588, short col = 0x000F)$/;"	f	class:olcConsoleGameEngine
FillTriangle	olcConsoleGameEngine.h	/^	void FillTriangle(int x1, int y1, int x2, int y2, int x3, int y3, short c = 0x2588, short col = 0x000F)$/;"	f	class:olcConsoleGameEngine
GL_GENERATE_MIPMAP	olcConsoleGameEngine.h	131;"	d
GL_GENERATE_MIPMAP_HINT	olcConsoleGameEngine.h	132;"	d
GREEN	Alien.h	/^enum class Color { BLUE = 145, GREEN = 165 , WHITE = 245, YELLOW = 235};$/;"	m	class:Color
GameThread	olcConsoleGameEngine.h	/^	void GameThread()$/;"	f	class:olcConsoleGameEngine
GenerateMipmapPow2	olcConsoleGameEngine.h	/^	void GenerateMipmapPow2(uint8_t *tex_new, uint8_t *tex_old, uint8_t *ref_alpha, int size)$/;"	f	class:olcConsoleGameEngine
GetColour	olcConsoleGameEngine.h	/^	short GetColour(int x, int y)$/;"	f	class:olcSprite
GetFontCoords	olcConsoleGameEngine.h	/^void GetFontCoords(int id, int *x, int *y) {$/;"	f
GetGlyph	olcConsoleGameEngine.h	/^	wchar_t GetGlyph(int x, int y)$/;"	f	class:olcSprite
GetKey	olcConsoleGameEngine.h	/^	sKeyState GetKey(int nKeyID) { return m_keys[nKeyID]; }$/;"	f	class:olcConsoleGameEngine
GetMixerOutput	olcConsoleGameEngine.h	/^		float GetMixerOutput(int nChannel, float fGlobalTime, float fTimeStep)$/;"	f	class:olcConsoleGameEngine
GetMouse	olcConsoleGameEngine.h	/^	sKeyState GetMouse(int nMouseButtonID) { return m_mouse[nMouseButtonID]; }$/;"	f	class:olcConsoleGameEngine
GetMouseX	olcConsoleGameEngine.h	/^	int GetMouseX() { return m_mousePosX; }$/;"	f	class:olcConsoleGameEngine
GetMouseY	olcConsoleGameEngine.h	/^	int GetMouseY() { return m_mousePosY; }$/;"	f	class:olcConsoleGameEngine
Globals	globals.h	/^namespace Globals {$/;"	n
GoalPos	Alien.h	/^  float GoalPos[2]; \/\/ for sniper behavior$/;"	m	struct:Color::Alien
GotHit	Alien.h	/^bool Alien::GotHit(const Alien &a, const Bullet &b) {$/;"	f	class:Color::Alien
Health	Alien.h	/^  int Health;$/;"	m	struct:Color::Alien
IsFocused	olcConsoleGameEngine.h	/^	bool IsFocused() { return m_bConsoleInFocus; }$/;"	f	class:olcConsoleGameEngine
IsGoodToShoot	Alien.h	/^bool Alien::IsGoodToShoot(const Alien& a, const float* playerPos, const float& fElapsed)$/;"	f	class:Color::Alien
IsSniperGoodToShoot	Alien.h	/^bool Alien::IsSniperGoodToShoot(const Alien& a, const float* playerPos, const float& fElapsed)$/;"	f	class:Color::Alien
Level	globals.h	/^  int Level = 0;							\/\/ what level are we on$/;"	v
Load	olcConsoleGameEngine.h	/^	bool Load(wstring sFile)$/;"	f	class:olcSprite
LoadAudioSample	olcConsoleGameEngine.h	/^		unsigned int LoadAudioSample(std::wstring sWavFile)$/;"	f	class:olcConsoleGameEngine
OnUserCreate	main.cpp	/^  bool OnUserCreate() {$/;"	f	struct:Example
OnUserDestroy	olcConsoleGameEngine.h	/^	virtual bool OnUserDestroy()$/;"	f	class:olcConsoleGameEngine
OnUserUpdate	main.cpp	/^  bool OnUserUpdate(float fElapsedTime) {$/;"	f	struct:Example
PAUSE	globals.h	/^  bool PAUSE = false;	    				\/\/ is game paused$/;"	v
PIXEL_HALF	olcConsoleGameEngine.h	/^	PIXEL_HALF = 0x2592,$/;"	e	enum:PIXEL_TYPE
PIXEL_QUARTER	olcConsoleGameEngine.h	/^	PIXEL_QUARTER = 0x2591,$/;"	e	enum:PIXEL_TYPE
PIXEL_SOLID	olcConsoleGameEngine.h	/^	PIXEL_SOLID = 0x2588,$/;"	e	enum:PIXEL_TYPE
PIXEL_THREEQUARTERS	olcConsoleGameEngine.h	/^	PIXEL_THREEQUARTERS = 0x2593,$/;"	e	enum:PIXEL_TYPE
PIXEL_TYPE	olcConsoleGameEngine.h	/^enum PIXEL_TYPE$/;"	g
ParticleEffect	ParticleEffect.h	/^        ParticleEffect(int x, int y, float duration, float param2) {$/;"	f	struct:ParticleEffect
ParticleEffect	ParticleEffect.h	/^struct ParticleEffect {$/;"	s
ParticleEffect2	ParticleEffect.h	/^        ParticleEffect2(const Bullet & b, const Alien& a) {$/;"	f	struct:ParticleEffect2
ParticleEffect2	ParticleEffect.h	/^        ParticleEffect2(const Bullet & b, float *playerPos) {$/;"	f	struct:ParticleEffect2
ParticleEffect2	ParticleEffect.h	/^struct ParticleEffect2 {$/;"	s
ParticleEffect3	ParticleEffect.h	/^        ParticleEffect3(const Bullet & b, const Alien& a) {$/;"	f	struct:ParticleEffect3
ParticleEffect3	ParticleEffect.h	/^struct ParticleEffect3 {$/;"	s
Piece	ParticleEffect.h	/^    Piece(float a, float b, float vxx, float vyy) : x(a), y(b), vx(vxx), vy(vyy) { }$/;"	f	struct:Piece
Piece	ParticleEffect.h	/^struct Piece {$/;"	s
PlaySample	olcConsoleGameEngine.h	/^		void PlaySample(int id, bool bLoop = false)$/;"	f	class:olcConsoleGameEngine
PlayerGotHit	globals.h	/^  bool PlayerGotHit(const float * playerPos, const Bullet& b) {$/;"	f	namespace:Globals
Pos	Alien.h	/^  float Pos[2];$/;"	m	struct:Color::Alien
Pos	Bullet.h	/^  float Pos[2];$/;"	m	struct:Bullet
PosX0	Alien.h	/^  float PosX0, PosY0;$/;"	m	struct:Color::Alien
PosY0	Alien.h	/^  float PosX0, PosY0;$/;"	m	struct:Color::Alien
SampleColour	olcConsoleGameEngine.h	/^	short SampleColour(float x, float y)$/;"	f	class:olcSprite
SampleGlyph	olcConsoleGameEngine.h	/^	wchar_t SampleGlyph(float x, float y)$/;"	f	class:olcSprite
Save	olcConsoleGameEngine.h	/^	bool Save(wstring sFile)$/;"	f	class:olcSprite
ScreenHeight	olcConsoleGameEngine.h	/^	int ScreenHeight()$/;"	f	class:olcConsoleGameEngine
ScreenWidth	olcConsoleGameEngine.h	/^	int ScreenWidth()$/;"	f	class:olcConsoleGameEngine
SetColour	olcConsoleGameEngine.h	/^	void SetColour(int x, int y, short c)$/;"	f	class:olcSprite
SetGlyph	olcConsoleGameEngine.h	/^	void SetGlyph(int x, int y, wchar_t c)$/;"	f	class:olcSprite
SetPixelFormatGL	olcConsoleGameEngine.h	/^	int SetPixelFormatGL(void)$/;"	f	class:olcConsoleGameEngine
Start	olcConsoleGameEngine.h	/^	void Start()$/;"	f	class:olcConsoleGameEngine
StopSample	olcConsoleGameEngine.h	/^		void StopSample(int id)$/;"	f	class:olcConsoleGameEngine
TimeSinceFired	Alien.h	/^  mutable float TimeSinceFired;$/;"	m	struct:Color::Alien
ToggleFullscreen	olcConsoleGameEngine.h	/^	void ToggleFullscreen(HWND hWnd)$/;"	f	class:olcConsoleGameEngine
TotalTime	globals.h	/^  float TotalTime = 0.0; $/;"	v
UNICODE	olcConsoleGameEngine.h	112;"	d
UpdateMousePosition	olcConsoleGameEngine.h	/^	void UpdateMousePosition(int x, int y)$/;"	f	class:olcConsoleGameEngine
UpdatePosition	Alien.h	/^  void UpdatePosition(float fElapsed) {$/;"	f	struct:Color::Alien
Vel	Alien.h	/^  float Vel[2];$/;"	m	struct:Color::Alien
Vel	Bullet.h	/^  float Vel[2];$/;"	m	struct:Bullet
WHITE	Alien.h	/^enum class Color { BLUE = 145, GREEN = 165 , WHITE = 245, YELLOW = 235};$/;"	m	class:Color
WindowResize	olcConsoleGameEngine.h	/^	void WindowResize(void)$/;"	f	class:olcConsoleGameEngine
WindowUpdateScale	olcConsoleGameEngine.h	/^	void WindowUpdateScale(void)$/;"	f	class:olcConsoleGameEngine
YELLOW	Alien.h	/^enum class Color { BLUE = 145, GREEN = 165 , WHITE = 245, YELLOW = 235};$/;"	m	class:Color
_UNICODE	olcConsoleGameEngine.h	113;"	d
_USE_MATH_DEFINES	stdlibs.h	5;"	d
_maxTimer	ParticleEffect.h	/^        float _maxTimer;$/;"	m	struct:ParticleEffect
_maxTimer	ParticleEffect.h	/^        float _maxTimer;$/;"	m	struct:ParticleEffect2
_maxTimer	ParticleEffect.h	/^        float _maxTimer;$/;"	m	struct:ParticleEffect3
_timer	ParticleEffect.h	/^        float _timer;$/;"	m	struct:ParticleEffect
_timer	ParticleEffect.h	/^        float _timer;$/;"	m	struct:ParticleEffect2
_timer	ParticleEffect.h	/^        float _timer;$/;"	m	struct:ParticleEffect3
attitude	Alien.h	/^  Behavior attitude;$/;"	m	struct:Color::Alien
bFinished	olcConsoleGameEngine.h	/^			bool bFinished = false;$/;"	m	struct:olcConsoleGameEngine::sCurrentlyPlayingSample
bHeld	olcConsoleGameEngine.h	/^		bool bHeld;$/;"	m	struct:olcConsoleGameEngine::sKeyState
bLoop	olcConsoleGameEngine.h	/^			bool bLoop = false;$/;"	m	struct:olcConsoleGameEngine::sCurrentlyPlayingSample
bPressed	olcConsoleGameEngine.h	/^		bool bPressed;$/;"	m	struct:olcConsoleGameEngine::sKeyState
bReleased	olcConsoleGameEngine.h	/^		bool bReleased;$/;"	m	struct:olcConsoleGameEngine::sKeyState
bSampleValid	olcConsoleGameEngine.h	/^			bool bSampleValid = false;$/;"	m	class:olcConsoleGameEngine::olcAudioSample
bullet	main.cpp	/^  vector<Bullet> bullet;$/;"	m	struct:Example	file:
centerX	ParticleEffect.h	/^        int centerX;$/;"	m	struct:ParticleEffect2
centerY	ParticleEffect.h	/^        int centerY;$/;"	m	struct:ParticleEffect2
center_b_X	ParticleEffect.h	/^        int center_b_X;$/;"	m	struct:ParticleEffect3
center_b_Y	ParticleEffect.h	/^        int center_b_Y;$/;"	m	struct:ParticleEffect3
circles	Alien.h	/^enum class Behavior { circles, side_to_side, sniper };$/;"	m	class:Behavior
color	Alien.h	/^  Color color;$/;"	m	struct:Color::Alien
color	ParticleEffect.h	/^        Color color;$/;"	m	struct:ParticleEffect3
dropColor	Drop.h	/^  int dropColor;$/;"	m	struct:Drop
dropHeight	Drop.h	/^  static int dropHeight;$/;"	m	struct:Drop
dropHeight	Drop.h	/^int Drop::dropHeight = 3;$/;"	m	class:Drop
dropWidth	Drop.h	/^  static int dropWidth;$/;"	m	struct:Drop
dropWidth	Drop.h	/^int Drop::dropWidth = 1;$/;"	m	class:Drop
enemy	main.cpp	/^  list<Alien> enemy;  $/;"	m	struct:Example	file:
enemy_bullet	main.cpp	/^  vector<Bullet> enemy_bullet;$/;"	m	struct:Example	file:
exploding_bullet	main.cpp	/^  vector<ParticleEffect2> exploding_bullet;$/;"	m	struct:Example	file:
exploding_enemy	main.cpp	/^  vector<ParticleEffect3> exploding_enemy;$/;"	m	struct:Example	file:
fSample	olcConsoleGameEngine.h	/^			float *fSample = nullptr;$/;"	m	class:olcConsoleGameEngine::olcAudioSample
font_decode_custom_base64	olcConsoleGameEngine.h	/^void font_decode_custom_base64(void)$/;"	f
frags	ParticleEffect.h	/^        std::vector<Piece> frags; \/\/ bullet fragments$/;"	m	struct:ParticleEffect2
frags	ParticleEffect.h	/^        std::vector<Piece> frags; \/\/ enemy pixel fragments$/;"	m	struct:ParticleEffect3
getCenterX	Alien.h	/^  float getCenterX() const { return Pos[0] + width \/ 2.0; }$/;"	f	struct:Color::Alien
getCenterY	Alien.h	/^  float getCenterY() const { return Pos[1] + height \/ 2.0; }$/;"	f	struct:Color::Alien
height	Alien.h	/^  int height, width;$/;"	m	struct:Color::Alien
kBulletHeight	globals.h	/^  constexpr int kBulletHeight = 5;$/;"	v
kBulletSpeed	globals.h	/^  constexpr int kBulletSpeed = -160;$/;"	v
kBulletWidth	globals.h	/^  constexpr int kBulletWidth = 2;$/;"	v
kCutSceneLength	globals.h	/^  constexpr float kCutSceneLength = 1.75;	\/\/ seconds pause$/;"	v
kEnemyReloadingTime	globals.h	/^  const float kEnemyReloadingTime = 0.9;$/;"	v
kHealthBarRadius	globals.h	/^  const int kHealthBarRadius = 5;$/;"	v
kLivesPerLevel	globals.h	/^  const int kLivesPerLevel = 3;$/;"	v
kPixelSize	globals.h	/^  const int kPixelSize = 2;$/;"	v
kPlayerHeight	globals.h	/^  const int kPlayerHeight = 6;$/;"	v
kPlayerSpeed	globals.h	/^  const float kPlayerSpeed = 165;$/;"	v
kPlayerWidth	globals.h	/^  const int kPlayerWidth = 10;$/;"	v
kRainDropCount	globals.h	/^  const int kRainDropCount = 165;$/;"	v
kScreenHeight	globals.h	/^  constexpr float kScreenHeight = kScreenWidth * 9 \/ 16;$/;"	v
kScreenWidth	globals.h	/^  constexpr float kScreenWidth = 500;$/;"	v
listActiveSamples	olcConsoleGameEngine.h	/^		std::list<sCurrentlyPlayingSample> listActiveSamples;$/;"	m	class:olcConsoleGameEngine
m_AudioThread	olcConsoleGameEngine.h	/^		std::thread m_AudioThread;$/;"	m	class:olcConsoleGameEngine
m_ColourPalette	olcConsoleGameEngine.h	/^	uint32_t m_ColourPalette[16] = \/\/ 0xAABBGGRR$/;"	m	class:olcConsoleGameEngine
m_Colours	olcConsoleGameEngine.h	/^	short *m_Colours = nullptr;$/;"	m	class:olcSprite
m_Glyphs	olcConsoleGameEngine.h	/^	wchar_t *m_Glyphs = nullptr;$/;"	m	class:olcSprite
m_bAtomActive	olcConsoleGameEngine.h	/^	static atomic<bool> m_bAtomActive;$/;"	m	class:olcConsoleGameEngine
m_bAudioThreadActive	olcConsoleGameEngine.h	/^		std::atomic<bool> m_bAudioThreadActive = false;$/;"	m	class:olcConsoleGameEngine
m_bConsoleInFocus	olcConsoleGameEngine.h	/^	bool m_bConsoleInFocus = true;$/;"	m	class:olcConsoleGameEngine
m_bDoWindowUpdate	olcConsoleGameEngine.h	/^	bool m_bDoWindowUpdate = false;$/;"	m	class:olcConsoleGameEngine
m_bEnableSound	olcConsoleGameEngine.h	/^		bool m_bEnableSound = false;$/;"	m	class:olcConsoleGameEngine
m_bufMemory	olcConsoleGameEngine.h	/^	uint8_t *m_bufMemory;$/;"	m	class:olcConsoleGameEngine
m_bufScreen	olcConsoleGameEngine.h	/^	CHAR_INFO *m_bufScreen;$/;"	m	class:olcConsoleGameEngine
m_bufScreen_old	olcConsoleGameEngine.h	/^	CHAR_INFO *m_bufScreen_old;$/;"	m	class:olcConsoleGameEngine
m_cvBlockNotZero	olcConsoleGameEngine.h	/^		std::condition_variable m_cvBlockNotZero;$/;"	m	class:olcConsoleGameEngine
m_cvGameFinished	olcConsoleGameEngine.h	/^	static condition_variable m_cvGameFinished;$/;"	m	class:olcConsoleGameEngine
m_cvGameFinished	olcConsoleGameEngine.h	/^condition_variable olcConsoleGameEngine::m_cvGameFinished;$/;"	m	class:olcConsoleGameEngine
m_fDrawOffsetX	olcConsoleGameEngine.h	/^	float m_fDrawOffsetX;$/;"	m	class:olcConsoleGameEngine
m_fDrawOffsetY	olcConsoleGameEngine.h	/^	float m_fDrawOffsetY;$/;"	m	class:olcConsoleGameEngine
m_fDrawScale	olcConsoleGameEngine.h	/^	float m_fDrawScale;$/;"	m	class:olcConsoleGameEngine
m_fGlobalTime	olcConsoleGameEngine.h	/^		std::atomic<float> m_fGlobalTime = 0.0f;$/;"	m	class:olcConsoleGameEngine
m_fTexCoordArray	olcConsoleGameEngine.h	/^	float *m_fTexCoordArray;$/;"	m	class:olcConsoleGameEngine
m_fVertexArray	olcConsoleGameEngine.h	/^	float *m_fVertexArray;$/;"	m	class:olcConsoleGameEngine
m_hConsole	olcConsoleGameEngine.h	/^	HWND  m_hConsole = nullptr;$/;"	m	class:olcConsoleGameEngine
m_hDevCtx	olcConsoleGameEngine.h	/^	HDC   m_hDevCtx = nullptr;$/;"	m	class:olcConsoleGameEngine
m_hRenCtx	olcConsoleGameEngine.h	/^	HGLRC m_hRenCtx = nullptr;$/;"	m	class:olcConsoleGameEngine
m_hWnd	olcConsoleGameEngine.h	/^	HWND  m_hWnd = nullptr;$/;"	m	class:olcConsoleGameEngine
m_hwDevice	olcConsoleGameEngine.h	/^		HWAVEOUT m_hwDevice = nullptr;$/;"	m	class:olcConsoleGameEngine
m_keyNewState	olcConsoleGameEngine.h	/^	short m_keyNewState[256] = { 0 };$/;"	m	class:olcConsoleGameEngine
m_keyOldState	olcConsoleGameEngine.h	/^	short m_keyOldState[256] = { 0 };$/;"	m	class:olcConsoleGameEngine
m_keys	olcConsoleGameEngine.h	/^	} m_keys[256], m_mouse[5];$/;"	m	class:olcConsoleGameEngine	typeref:struct:olcConsoleGameEngine::sKeyState
m_mouse	olcConsoleGameEngine.h	/^	} m_keys[256], m_mouse[5];$/;"	m	class:olcConsoleGameEngine	typeref:struct:olcConsoleGameEngine::sKeyState
m_mouseNewState	olcConsoleGameEngine.h	/^	bool m_mouseNewState[5] = { 0 };$/;"	m	class:olcConsoleGameEngine
m_mouseOldState	olcConsoleGameEngine.h	/^	bool m_mouseOldState[5] = { 0 };$/;"	m	class:olcConsoleGameEngine
m_mousePosX	olcConsoleGameEngine.h	/^	int m_mousePosX;$/;"	m	class:olcConsoleGameEngine
m_mousePosY	olcConsoleGameEngine.h	/^	int m_mousePosY;$/;"	m	class:olcConsoleGameEngine
m_muxBlockNotZero	olcConsoleGameEngine.h	/^		std::mutex m_muxBlockNotZero;$/;"	m	class:olcConsoleGameEngine
m_muxGame	olcConsoleGameEngine.h	/^	static mutex m_muxGame;$/;"	m	class:olcConsoleGameEngine
m_muxGame	olcConsoleGameEngine.h	/^mutex olcConsoleGameEngine::m_muxGame;/;"	m	class:olcConsoleGameEngine
m_nBlockCount	olcConsoleGameEngine.h	/^		unsigned int m_nBlockCount;$/;"	m	class:olcConsoleGameEngine
m_nBlockCurrent	olcConsoleGameEngine.h	/^		unsigned int m_nBlockCurrent;$/;"	m	class:olcConsoleGameEngine
m_nBlockFree	olcConsoleGameEngine.h	/^		std::atomic<unsigned int> m_nBlockFree = 0;$/;"	m	class:olcConsoleGameEngine
m_nBlockSamples	olcConsoleGameEngine.h	/^		unsigned int m_nBlockSamples;$/;"	m	class:olcConsoleGameEngine
m_nChannels	olcConsoleGameEngine.h	/^		unsigned int m_nChannels;$/;"	m	class:olcConsoleGameEngine
m_nFontHeight	olcConsoleGameEngine.h	/^	int m_nFontHeight;$/;"	m	class:olcConsoleGameEngine
m_nFontWidth	olcConsoleGameEngine.h	/^	int m_nFontWidth;$/;"	m	class:olcConsoleGameEngine
m_nSampleRate	olcConsoleGameEngine.h	/^		unsigned int m_nSampleRate;$/;"	m	class:olcConsoleGameEngine
m_nScreenHeight	olcConsoleGameEngine.h	/^	int m_nScreenHeight;$/;"	m	class:olcConsoleGameEngine
m_nScreenWidth	olcConsoleGameEngine.h	/^	int m_nScreenWidth;$/;"	m	class:olcConsoleGameEngine
m_nWindowHeight	olcConsoleGameEngine.h	/^	int m_nWindowHeight;$/;"	m	class:olcConsoleGameEngine
m_nWindowWidth	olcConsoleGameEngine.h	/^	int m_nWindowWidth;$/;"	m	class:olcConsoleGameEngine
m_pBlockMemory	olcConsoleGameEngine.h	/^		short* m_pBlockMemory = nullptr;$/;"	m	class:olcConsoleGameEngine
m_pWaveHeaders	olcConsoleGameEngine.h	/^		WAVEHDR *m_pWaveHeaders = nullptr;$/;"	m	class:olcConsoleGameEngine
m_rectWindow	olcConsoleGameEngine.h	/^	SMALL_RECT m_rectWindow;$/;"	m	class:olcConsoleGameEngine
m_sAppName	olcConsoleGameEngine.h	/^	wstring m_sAppName;$/;"	m	class:olcConsoleGameEngine
m_uBackgroundColorArray	olcConsoleGameEngine.h	/^	uint32_t *m_uBackgroundColorArray;$/;"	m	class:olcConsoleGameEngine
m_uFontTexture	olcConsoleGameEngine.h	/^	GLuint m_uFontTexture;$/;"	m	class:olcConsoleGameEngine
m_uForegroundColorArray	olcConsoleGameEngine.h	/^	uint32_t *m_uForegroundColorArray;$/;"	m	class:olcConsoleGameEngine
m_uIndicesArray	olcConsoleGameEngine.h	/^	uint32_t *m_uIndicesArray;$/;"	m	class:olcConsoleGameEngine
main	main.cpp	/^int main() {$/;"	f
nAudioSampleID	olcConsoleGameEngine.h	/^			int nAudioSampleID = 0;$/;"	m	struct:olcConsoleGameEngine::sCurrentlyPlayingSample
nChannels	olcConsoleGameEngine.h	/^			int nChannels = 0;$/;"	m	class:olcConsoleGameEngine::olcAudioSample
nHeight	olcConsoleGameEngine.h	/^	int nHeight = 0;$/;"	m	class:olcSprite
nSamplePosition	olcConsoleGameEngine.h	/^			long nSamplePosition = 0;$/;"	m	struct:olcConsoleGameEngine::sCurrentlyPlayingSample
nSamples	olcConsoleGameEngine.h	/^			long nSamples = 0;$/;"	m	class:olcConsoleGameEngine::olcAudioSample
nWidth	olcConsoleGameEngine.h	/^	int nWidth = 0;$/;"	m	class:olcSprite
olcAudioSample	olcConsoleGameEngine.h	/^			olcAudioSample()$/;"	f	class:olcConsoleGameEngine::olcAudioSample
olcAudioSample	olcConsoleGameEngine.h	/^			olcAudioSample(std::wstring sWavFile)$/;"	f	class:olcConsoleGameEngine::olcAudioSample
olcAudioSample	olcConsoleGameEngine.h	/^		class olcAudioSample$/;"	c	class:olcConsoleGameEngine
olcConsoleGameEngine	olcConsoleGameEngine.h	/^	olcConsoleGameEngine()$/;"	f	class:olcConsoleGameEngine
olcConsoleGameEngine	olcConsoleGameEngine.h	/^class olcConsoleGameEngine$/;"	c
olcSprite	olcConsoleGameEngine.h	/^	olcSprite()$/;"	f	class:olcSprite
olcSprite	olcConsoleGameEngine.h	/^	olcSprite(int w, int h)$/;"	f	class:olcSprite
olcSprite	olcConsoleGameEngine.h	/^	olcSprite(wstring sFile)$/;"	f	class:olcSprite
olcSprite	olcConsoleGameEngine.h	/^class olcSprite$/;"	c
olcWndProc	olcConsoleGameEngine.h	/^		LRESULT CALLBACK olcWndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam)$/;"	f	class:olcConsoleGameEngine
onUserSoundFilter	olcConsoleGameEngine.h	/^		virtual float onUserSoundFilter(int nChannel, float fGlobalTime, float fSample)$/;"	f	class:olcConsoleGameEngine
onUserSoundSample	olcConsoleGameEngine.h	/^		virtual float onUserSoundSample(int nChannel, float fGlobalTime, float fTimeStep)$/;"	f	class:olcConsoleGameEngine
playerHealth	main.cpp	/^  int playerHealth;   \/\/ player's current health$/;"	m	struct:Example	file:
playerPos	main.cpp	/^  float playerPos[2];$/;"	m	struct:Example	file:
pxplus_ibm_cga	olcConsoleGameEngine.h	/^unsigned char pxplus_ibm_cga[65536];$/;"	v
pxplus_ibm_cga_enc	olcConsoleGameEngine.h	/^char pxplus_ibm_cga_enc[8509 + 1] =$/;"	v
rain	main.cpp	/^  vector<Drop> rain;$/;"	m	struct:Example	file:
sCurrentlyPlayingSample	olcConsoleGameEngine.h	/^		struct sCurrentlyPlayingSample$/;"	s	class:olcConsoleGameEngine
sKeyState	olcConsoleGameEngine.h	/^	struct sKeyState$/;"	s	class:olcConsoleGameEngine
side_to_side	Alien.h	/^enum class Behavior { circles, side_to_side, sniper };$/;"	m	class:Behavior
vecAudioSamples	olcConsoleGameEngine.h	/^		std::vector<olcAudioSample> vecAudioSamples;$/;"	m	class:olcConsoleGameEngine
vx	ParticleEffect.h	/^    float x, y, vx, vy;$/;"	m	struct:Piece
vy	ParticleEffect.h	/^    float x, y, vx, vy;$/;"	m	struct:Piece
wavHeader	olcConsoleGameEngine.h	/^			WAVEFORMATEX wavHeader;$/;"	m	class:olcConsoleGameEngine::olcAudioSample
waveOutProc	olcConsoleGameEngine.h	/^		void waveOutProc(HWAVEOUT hWaveOut, UINT uMsg, DWORD dwParam1, DWORD dwParam2)$/;"	f	class:olcConsoleGameEngine
waveOutProcWrap	olcConsoleGameEngine.h	/^		static void CALLBACK waveOutProcWrap(HWAVEOUT hWaveOut, UINT uMsg, DWORD dwInstance, DWORD dwParam1, DWORD dwParam2)$/;"	f	class:olcConsoleGameEngine
wglSwapInterval	olcConsoleGameEngine.h	/^wglSwapInterval_t *wglSwapInterval;$/;"	v
wglSwapInterval_t	olcConsoleGameEngine.h	/^typedef BOOL(WINAPI wglSwapInterval_t) (int interval);$/;"	t
width	Alien.h	/^  int height, width;$/;"	m	struct:Color::Alien
x	Drop.h	/^  float x, y;$/;"	m	struct:Drop
x	ParticleEffect.h	/^    float x, y, vx, vy;$/;"	m	struct:Piece
xPos0	ParticleEffect.h	/^        int xPos0;$/;"	m	struct:ParticleEffect
y	Drop.h	/^  float x, y;$/;"	m	struct:Drop
y	ParticleEffect.h	/^    float x, y, vx, vy;$/;"	m	struct:Piece
yPos0	ParticleEffect.h	/^        int yPos0;$/;"	m	struct:ParticleEffect
yspeed	Drop.h	/^  int yspeed;$/;"	m	struct:Drop
~olcConsoleGameEngine	olcConsoleGameEngine.h	/^	~olcConsoleGameEngine()$/;"	f	class:olcConsoleGameEngine
